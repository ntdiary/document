
原文地址：https://gitlab.com/help/workflow/gitlab_flow.md

* GitLab工作流
** 简介
使用git进行版本管理，使得分支和合并比早期的版本系统(如svn)容易得多。这也意味着可以支持多样的分支策略和工作流。这些也都改善了在git之前的使用方式。但大多数机构的工作流程要么定义不够清晰，要么太过复杂，或者并没有整合入问题追踪系统。基于此，我们提出了GitLab工作流作为明确的最佳实践。它整合了[[https://en.wikipedia.org/wiki/Feature-driven_development][功能驱动开发]]和带有问题追踪的[[http://martinfowler.com/bliki/FeatureBranch.html][功能分支]]。

刚从其它版本控制系统迁移到git时，大多数公司常会觉得很难找到一种高效的工作流。本文介绍了GitLab工作流，它将问题追踪系统整合到了git工作流中，也提供了一种简单、透明、有效的方式来使用git。

#+DOWNLOADED: https://gitlab.com/help/workflow/four_stages.png @ 2018-03-12 01:30:52
[[file:img/20180312013049.png]]

当转换为git时，你必须习惯于在和同事协作时会有三个步骤；而大多数版本控制系统仅需一步，从工作副本中提交到共享服务器中。在git中，你需要先把文件从工作区中加入到暂存区域，之后再提交到本地仓库中，第三步是把改动推送到远程共享仓库中。在习惯这三步之后，即可尝试分支模型。

#+DOWNLOADED: https://gitlab.com/help/workflow/messy_flow.png @ 2018-03-12 01:39:43
[[file:img/20180312013931.png]]

因为大多数机构在刚接触git时，并没有约定应该如何使用它，版本管理可能很快会变成一团乱麻。他们遇到最大的问题，可能是许多长期运行的分支中，都包含有部分版本变化。人们很难弄清楚自己应该在哪个分支上开发或将哪个分支部署到生产上。面对这种问题，常见的措施是采用标准化的模式，如[[http://nvie.com/posts/a-successful-git-branching-model/][git工作流]]和[[http://scottchacon.com/2011/08/31/github-flow.html][GitHub工作流]]。我们认为在此之上仍有改进的空间并细化出了GitLab工作流。
** Git工作流及其问题
